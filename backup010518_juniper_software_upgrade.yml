---
- name: Playbook for upgrading the Junos Routers
  hosts: all
  connection: local
  gather_facts: no
  roles:
    - Juniper.junos 
  vars_prompt:
    - name: juniper_junos_facts_config_format
      prompt: "Please enter the format for the device configuration(xml, json, set, text): "
      default: xml      
    - name: junos_software_package_local
      prompt: "Please enter the package full path on local machine: "
#    - name: junos_software_package_version
#      prompt: "Please enter the version of new software: "
  tasks:
    # This block gathers the router facts/info.
    - block:
      # This task gathers the router facts/info. No configuration data will be gathered.
      - import_tasks: tasks/juniper/facts/gather_facts_without_config.yml

    # This block only intimates the user about the aborting the play for the device having only 1 RE.
    # Note: The condition/logic for skipping the remaining tasks is in next block. This block will not make the remaining tasks to skip.
    - block:
      # This Task print the abort message for single RE routers.
      - import_tasks: tasks/common/display/message.yml  
        vars:
          message_to_display: "Aborting the play for host {{ inventory_hostname }} as it has only one Routing engine. Remaining Tasks will get Skipped for this host."  
          message_task_name: "Message for aborting in case of Single RE"
      when: not ansible_facts.junos.has_2RE
 
    # This blocks continues the process of software upgrade for routers having 2 REs. 
    # It will skip all tasks if having only one RE.
    - block:
      # This task generates the jsnapy test template for validating the admin and oper status of both physical and logical interfaces to be up.      
      #- import_tasks: tasks/juniper/jsnapy/tests_generator/validate_interface_status.yml 

      # This task validates the admin and oper status of both physical and logical interfaces to be up.
      # it uses the Jsnapy test file generated generated by previous task.
      #- import_tasks: tasks/juniper/jsnapy/validations/validate.yml
      #  vars:
      #    jsnapy_test_files: [validate_interface_status.yml]
      #    jsnapy_task_name: "interface(oper and admin) status are up"
      #    jsnapy_test_dir: "jsnapy_tests/validations/"
      
      #- import_tasks: tasks/juniper/jsnapy/tests_generator/check_interface_status.yml

      # This block will perform upgrade, pre and post checks and validations.
      - block:
        # This task validates the admin and oper status of both physical and logical interfaces to be up.
        - import_tasks: tasks/juniper/jsnapy/validations/validate.yml
          vars:
            jsnapy_test_files: [validate_interface_status.yml]
            jsnapy_task_name: "interface(oper and admin) status are up"
            jsnapy_test_dir: "jsnapy_tests/validations/"

        - import_tasks: tasks/juniper/jsnapy/checks/pre/checks.yml 
          
        - import_tasks: tasks/juniper/jsnapy/checks/post/checks.yml
        
        # This block will upgrade the Router 
#        - block:
#          - name: Upgrade the juniper router
#            juniper_junos_software:
#              local_package: "{{ junos_software_package_local }}"
#              all_re: yes                                                       # Perform upgrade on all REs
#              install_timeout: 1800                                             # 30 Mins
#              issu: yes
#              reboot: no                                                        # If reboot is required set it to yes
#              reboot_pause: 30     
#              validate: no
##              version: "{{ junos_software_package_version}}"                   # Let be commented ... version in soft package should be used instead
#            register: response_of_upgrade
#
#          - name: Print the Response of Upgrade
#            debug:
#              var: response_of_upgrade

        - import_tasks: tasks/juniper/jsnapy/checks/checks.yml
        vars:
          jsnapy_test_files: [check_interface_status.yml, check_isis.yml, check_bgp.yml]
          #jsnapy_test_files: [check_bgp.yml]
          jsnapy_task_name: "interface, isis, bgp"
          jsnapy_test_dir: "jsnapy_tests/checks/"
        

   
      
       
      when: ansible_facts.junos.has_2RE
      
     
